using System;

// Лямбда выражения и лямбда операторы.
/// Эволюция: лямбда-метод -> лямбда-оператор -> лямбда-выражение


namespace Delegates
{
    public delegate int MyDelegate(int a);

    class Program
    {
        static void Main()
        {
            MyDelegate myDelegate;

            myDelegate = delegate (int x) { return x * 2; }; // Лямбда-Метод (анонимный метод)

            myDelegate = (x) => { return x * 2; };          /// Лямбда-Оператор. 
                                                            /// Анонимный метод трансформировался в новую, более удобочитаемую конструкцию языка С# - лямбда-оператор;
                                                            /// не используется синтаксический сахар в виде ключевого слова delegate,
                                                            /// не используем тип входного параметра, он определается из требований связанного 
                                                            /// класса-делегата MyDelegate, это тип int; т.е. вх. параметр строго не типизирован и определяется неявно.
                                                            /// "=>" - знак лямбда операции, звучит так: "входит"

            myDelegate = x => x * 2;                        /// Лямбда-Выражение.
                                                            /// убрали из лямбда-оператора синтаксический сахар в виде ключевого слова return, так как 
                                                            /// наличие и тип возвращаемого также определяется требованиями класса делегата MyDelegate (тип int);

            int result = myDelegate(4);
            Console.WriteLine(result);

            // Delay.
            Console.ReadKey();
        }
    }
}
/// 01:22:10 - Лямбда-выражение - это однооператорный лямбда-оператор. Поэтому он без фигурных скобок для тела выражения;
/// Лямбда-оператор - многоопператорное лямбда-выражение, т.е. в нем может быть множество операторов с разделителями в виде точки с запятой и все это дело 
/// заключается в фигурные скобки;

/// 01:23:01 - эти конструкции относятся к разделу функционального программирования,
/// несмотря на то, что они выражены в объектно-ориентированной семантике, т.е. предается объектно-ориентированный смысл ;
/// Видим как язык С# преобретает функциональный оттенок;

/// 01:23:40 - Три основные парадигмы функционального программирования, которые более детально рассматриваются на курсе professional:
/// - Замыкание;
/// - Мемоизация;
/// - Карирование;

/// Вспоминаем основные парадигмы ООП, 6 шт.
/// - Инкапсуляция;
/// - Наследование;
/// - Полиморфизм;
/// - Абстракция;
/// - Посылка сообщений;
/// - Повторное использование;
























